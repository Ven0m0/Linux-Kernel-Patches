From 1de9d32fdc09b261c720c121ce2215c3276f7aa1 Mon Sep 17 00:00:00 2001
From: Ionut Nechita <ionut_n2001@yahoo.com>
Date: Sun, 30 Mar 2025 16:21:42 +0300
Subject: [PATCH] SUNLIGHT: sched/fair: Implement sysctl_sched_child_runs_first
 functionality

Description:
 - This patch implements the functionality for the existing
   sysctl_sched_child_runs_first parameter that was previously defined
   but not used. When enabled, this parameter allows a child process to
   run before its parent after a fork operation.

   The implementation modifies place_entity() to set the child's vruntime
   equal to the parent's vruntime when the parent's vruntime is lower,
   giving the child process an equal chance to be scheduled immediately.

   The patch also reorganizes the declaration of curr to avoid redundancy
   and adds proper NULL checking to prevent potential kernel panics.

   This feature is useful for workloads where child processes perform
   critical operations that should be prioritized over the parent process,
   improving overall system responsiveness in those scenarios.

Change-Id: I7d4c79e689835d039039927c44d80e07bbce3698
Signed-off-by: Ionut Nechita <ionut_n2001@yahoo.com>
---
 kernel/sched/fair.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 3b3380277128..5f075aab7fc8 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -5242,6 +5242,7 @@ static void
 place_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int flags)
 {
 	u64 vslice, vruntime = avg_vruntime(cfs_rq);
+	struct sched_entity *curr = cfs_rq->curr;
 	s64 lag = 0;
 
 	if (!se->custom_slice)
@@ -5257,7 +5258,6 @@ place_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int flags)
 	 * EEVDF: placement strategy #1 / #2
 	 */
 	if (sched_feat(PLACE_LAG) && cfs_rq->nr_queued && se->vlag) {
-		struct sched_entity *curr = cfs_rq->curr;
 		unsigned long load;
 
 		lag = se->vlag;
@@ -5324,7 +5324,11 @@ place_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int flags)
 		lag = div_s64(lag, load);
 	}
 
-	se->vruntime = vruntime - lag;
+	if (sysctl_sched_child_runs_first && curr && curr->vruntime < se->vruntime) {
+		se->vruntime = curr->vruntime;
+	} else {
+		se->vruntime = vruntime - lag;
+	}
 
 	if (se->rel_deadline) {
 		se->deadline += se->vruntime;
